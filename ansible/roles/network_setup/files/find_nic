#!/usr/bin/env python3

#
# Copyright Â© 2020 Valve Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

from enum import Enum
import netifaces
import argparse
import time
import sys
import os


class NicRole(Enum):
    PRIVATE = "private"
    PUBLIC = "public"

    @staticmethod
    def list():
        return list(map(lambda c: c.value, NicRole))


class NIC:
    @property
    def base_path(self):
        return os.path.join('/sys/class/net/', self.name)

    def __read_file(self, file_name):
        try:
            with open(os.path.join(self.base_path, file_name), 'r') as f:
                return f.read()
        except OSError:
            return ""

    def __init__(self, nic_name):
        self.name = nic_name

        if not os.path.isdir(self.base_path):
            raise ValueError('The NIC name does not exist')

    @property
    def ifindex(self):
        return int(self.__read_file('ifindex').strip())

    @property
    def mac_address(self):
        return self.__read_file('address').strip()

    @property
    def addresses(self):
        return netifaces.ifaddresses(self.name)

    @property
    def gateways(self):
        return netifaces.gateways(self.name)

    @property
    def is_connected(self):
        return not self.__read_file('carrier').strip() == '0'

    @property
    def is_ethernet(self):
        return self.name.startswith('eth') or self.name.startswith('enp')

    def __repr__(self):
        return f"<NIC: {self.name}>"

    @staticmethod
    def list_ethernet_ifs():
        nics = []
        for name in os.listdir('/sys/class/net/'):
            nics.append(NIC(name))

        return [n for n in nics if n.is_ethernet]


def wait_for_valid_network_config():
    timeout = 10
    while timeout > 0:
        if len(NIC.list_ethernet_ifs()) == 2:
            return True
        else:
            timeout -= 1
            time.sleep(1)

    return False


def find_nic(role):
    eth_nics = NIC.list_ethernet_ifs()

    if len(eth_nics) != 2:
        raise ValueError('Unsupported configuration: Plug only two ethernet interfaces!')

    public_nic = None
    private_nic = None
    for nic in eth_nics:
        if len(nic.addresses.get(netifaces.AF_INET, [])) > 0:
            public_nic = nic
        else:
            private_nic = nic

    if public_nic is None:
        raise ValueError("The public interface requires a DHCP server on the network")

    if private_nic is None:
        raise ValueError("The private interface should not have any DHCP server on the network")

    if role == NicRole.PUBLIC.value:
        return public_nic
    else:
        return private_nic


parser = argparse.ArgumentParser()
parser.add_argument("--role", '-r', choices=NicRole.list(),
                    help="What role the interface should have: public=connected to the web, private=connected to the DUTs")
parser.add_argument("--wait", action="store_true",
                    help="Wait for the network configuration to be ready")
args = parser.parse_args()

if args.wait:
    sys.exit(0 if wait_for_valid_network_config() else 1)
elif args.role:
    print(find_nic(args.role).name)
