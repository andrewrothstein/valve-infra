# TODO: Move all the container builds to ci-templates, it provides
# some features like including project caching and more aggressive
# image size optimisations than we do here, as well as being something
# of a standard in fd.o. Unfortunately, there's a few shortcomings,
# and the project is rather complex to hack, so very much a WIP!
stages:
  - prep
  - containers
  - tests
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  FDO_UPSTREAM_REPO: mupuf/valve-infra
  PYTHON_VERSION: '3.10'

include:
  - project: 'freedesktop/ci-templates'
    ref: 34039cd573a2df832d465bc9e4c5f543571f5241
    file:
      - '/templates/arch.yml'
      - '/templates/debian.yml'

default:
  tags:
    - CI-gateway

# Containers
.container base:
  image: quay.io/podman/stable:latest
  stage: containers
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    - rm -rf /var/lib/containers/storage/libpod/*
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; fi
  # WARNING: after_script does not currently seem to work, we had to duplicate it into every container.

mesa-trigger-container:
  stage: containers
  extends: .fdo.container-build@debian
  rules:
    - changes:
      - .gitlab-ci/${CI_JOB_NAME}.yml
      - .gitlab-ci/${CI_JOB_NAME}.sh
  variables:
    FDO_DISTRIBUTION_PACKAGES: 'python3 python3-pip wget findutils bash'
    FDO_DISTRIBUTION_TAG: '2022-02-02-mesa-trigger'
    FDO_DISTRIBUTION_VERSION: 'testing'
    FDO_DISTRIBUTION_EXEC: .gitlab-ci/${CI_JOB_NAME}.sh

valve-infra-base-container:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: prep
  variables:
    BASE_IMAGE: archlinux:base-devel-20220130.0.46058
    FDO_DISTRIBUTION_TAG: '2022-02-10.1'
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  script: |
    set -eux

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi

    buildah_run="buildah run --isolation chroot"
    buildah_commit="buildah commit --format docker"

    buildcntr=$(buildah from --dns=none --isolation=chroot $BASE_IMAGE)
    buildmnt=$(buildah mount $buildcntr)

    cat <<EOF >$buildmnt/etc/resolv.conf
    nameserver 1.1.1.1
    nameserver 8.8.8.8
    nameserver 4.4.4.4
    EOF
    $buildah_run $buildcntr pacman -Syu --noconfirm
    $buildah_run $buildcntr pacman -S --noconfirm \
       ansible-core ansible-lint yamllint \
       bash bash-completion \
       gcc \
       git \
       glances \
       htop \
       nano vim \
       net-snmp \
       podman-docker \
       python \
       python-pip \
       rsync \
       speedtest-cli \
       systemd \
       tcpdump \
       wget

    # dnsmasq 2.86-1 has a bug in its signal handling, downgrade to 2.85-1 and pin
    # Reported upstream: https://lists.thekelleys.org.uk/pipermail/dnsmasq-discuss/2022q1/016133.html
    # Reported in Arch: https://bugs.archlinux.org/task/73684
    $buildah_run $buildcntr pacman --noconfirm -U https://archive.archlinux.org/packages/d/dnsmasq/dnsmasq-2.85-1-x86_64.pkg.tar.zst
    $buildah_run $buildcntr sed -i 's/^# *IgnorePkg =/IgnorePkg = dnsmasq/' /etc/pacman.conf

    # Shame we can't get just the community.general.pacman role, need
    # to whole 20MB of general packages. This is a lot better than
    # installing Arch's ansible package however, which weighs 700MB!
    # There's a tradeoff what to install in the base-container (this)
    # and what to install in Ansible. The more Ansible installs from
    # the network, the slower the CI gets. But the less that is
    # managed by Ansible, the less consistent the declarative picture
    # is... It's tempting to install everything we need in the base
    # container and drop completely the requirement on
    # community.general, that allows affords us more room to optimise
    # the size of the base layer.
    $buildah_run $buildcntr ansible-galaxy collection install community.general

    $buildah_run $buildcntr wget -O /usr/bin/mcli https://dl.min.io/client/mc/release/linux-amd64/mc
    $buildah_run $buildcntr chmod +x /usr/bin/mcli

    $buildah_run $buildcntr sh -c 'find /usr /etc /root -name __pycache__ -type d | xargs rm -rf'

    $buildah_run $buildcntr sh -c 'env LC_ALL=C pacman -Qi' | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h
    $buildah_run $buildcntr du -h -d 3 /usr /etc | sort -h
    $buildah_run $buildcntr du -h /usr/lib/python3.10/site-packages | sort -h

    buildah unmount $buildcntr
    $buildah_commit $buildcntr $IMAGE_NAME
    buildah rm $buildcntr

    podman login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    podman push $IMAGE_NAME || true
    sleep 2
    podman push $IMAGE_NAME
  rules:
    - when: on_success

ansible provisioning test:
  # Minimal image for running podman and friends
  # Would be nice depend on the image like this,
  #   image: $CI_REGISTRY_IMAGE/valve-infra-base-container:latest
  # but that bind-mounts /etc/resolv.conf, which breaks our networking setup.
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  variables:
    BASE_CONTAINER_TAG: !reference [valve-infra-base-container, variables, FDO_DISTRIBUTION_TAG]
    BASE_IMAGE: $CI_REGISTRY_IMAGE/valve-infra-base-container:$BASE_CONTAINER_TAG
  stage: tests
  script: |
    set -eux

    buildah_run="buildah run --isolation chroot"
    buildah_commit="buildah commit --format docker"

    buildcntr=$(buildah from -v `pwd`:/app/valve-infra --dns=none --isolation=chroot $BASE_IMAGE)
    buildmnt=$(buildah mount $buildcntr)

    buildah config --workingdir /app/valve-infra/ansible $buildcntr

    $buildah_run $buildcntr sh -c 'env LC_ALL=C pacman -Qi' | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h
    $buildah_run $buildcntr du -h -d 3 /usr /etc /app | sort -h
    $buildah_run $buildcntr du -h /usr/lib/python3.10/site-packages | sort -h

    # The Gitlab runner cache deliberately chmod 777's all
    # directories. This upsets ansible and there's nothing we can
    # really do about it in our repo. See
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4187
    $buildah_run $buildcntr chmod -R o-w /app/valve-infra/ansible
    $buildah_run $buildcntr ansible-lint --version
    $buildah_run $buildcntr ansible-lint -f plain
    $buildah_run $buildcntr ansible-playbook --syntax-check gateway.yml
    $buildah_run $buildcntr ansible-playbook ./gateway.yml -l localhost
  rules:
    - changes:
      # We might want to trigger on executor and salad...
      - ansible/**/*

valve-infra-container:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: deploy
  variables:
    BASE_CONTAINER_TAG: !reference [valve-infra-base-container, variables, FDO_DISTRIBUTION_TAG]
    BASE_IMAGE: $CI_REGISTRY_IMAGE/valve-infra-base-container:$BASE_CONTAINER_TAG
    FDO_DISTRIBUTION_TAG: 2022-02-10.1
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  script: |
    set -x

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi

    sh .gitlab-ci/valve-infra-container-build.sh
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success

machine-registration:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: deploy
  variables:
    FDO_DISTRIBUTION_TAG: 2022-02-10.1
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  script: |
    set -x

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi

    sh .gitlab-ci/machine-registration-container-build.sh
  variables:
    IMAGE_NAME: registry.freedesktop.org/mupuf/valve-infra/machine_registration

python-container:
  stage: prep
  extends:
    - .fdo.container-build@debian
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  variables:
    # We need a build toolchain because easysnmp in unmaintained, and
    # hence has no binary wheel for us to leverage.
    FDO_DISTRIBUTION_PACKAGES: "python3 python3-pip build-essential libsnmp-dev wget"
    FDO_DISTRIBUTION_VERSION: 'bullseye'
    FDO_REPO_SUFFIX: 'python-container'
    FDO_DISTRIBUTION_TAG: '2022-02-04.4'
    FDO_DISTRIBUTION_EXEC: 'pip install build tox twine pycodestyle'

.set-python-image:
  variables:
    TAG: !reference [python-container, variables, FDO_DISTRIBUTION_TAG]
  image: $CI_REGISTRY_IMAGE/python-container:$TAG

gitlab-trigger:
  extends:
    - .container base
  rules:
    - changes:
      - containers/gitlab-trigger/**/*
      - executor/client/**/*
      - valvetraces/**/*
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME -f containers/gitlab-trigger/Dockerfile .
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi

salad:
  extends:
    - .container base
  rules:
    - changes:
      - salad/**/*
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME salad/
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi

# FIXME: ipxe-boot-server should be moved to a proper Python package,
# so it can follow the pattern of the other Python services regarding
# linting, testing and building.
ipxe-boot-server:
  extends:
    - .set-python-image
  stage: tests
  rules:
    - changes:
      - $CI_JOB_NAME/**/*
      - .gitlab-ci.yml
  script:
    - cd $CI_JOB_NAME
    # Shouldn't we just use the setup.py to launch this, rather than calling specific tools?
    - pycodestyle --max-line-length=120 .
    - pip3 install -r requirements.txt
    - python3 -m unittest *.py

.python-test:
  extends:
    - .set-python-image
  stage: tests
  rules:
    - changes:
      - .gitlab-ci/python-container*
      - ${PACKAGE_DIR}/**/*
      - .gitlab-ci.yml
  script:
    - tox -c ${PACKAGE_DIR}/setup.cfg
    - python3 -m build ${PACKAGE_DIR}
  artifacts:
    paths:
      - ${PACKAGE_DIR}/dist/

.python-deploy:
  extends:
    - .set-python-image
  stage: deploy
  rules:
    - if: $TWINE_PASSWORD == ""
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
  script:
    - twine upload -u "__token__" ${PACKAGE_DIR}/dist/*
  # This will fail if the package already exists, not pleasant to
  # check ahead of time for that, so allow the job to fail
  allow_failure: true

test executor/client:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/client'

test executor/server:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/server'

deploy executor/client:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_CLIENT_TOKEN
    PACKAGE_DIR: 'executor/client'
  dependencies:
    - test executor/client

deploy executor/server:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_SERVER_TOKEN
    PACKAGE_DIR: 'executor/server'
  dependencies:
    - test executor/server

deploy gfxinfo:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_GFXINFO_TOKEN
    PACKAGE_DIR: gfxinfo
  before_script:
    - pushd gfxinfo/src/valve_gfx_ci/gfxinfo
    # Impossible to re-use cache_database() as it would force us to install all the deps of gfxinfo just to access these URLs...
    - wget "https://gitlab.freedesktop.org/agd5f/linux/-/raw/amd-staging-drm-next/drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c"
    - wget "https://gitlab.freedesktop.org/mesa/drm/-/raw/master/data/amdgpu.ids"
    - popd

deploy valvetraces:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_VALVETRACES_TOKEN
    PACKAGE_DIR: valvetraces
