# TODO: Move all the container builds to ci-templates, it provides
# some features like including project caching and more aggressive
# image size optimisations than we do here, as well as being something
# of a standard in fd.o. Unfortunately, there's a few shortcomings,
# and the project is rather complex to hack, so very much a WIP!
stages:
  - prep
  - tests
  - containers
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  FDO_UPSTREAM_REPO: mupuf/valve-infra
  PYTHON_VERSION: '3.10'

include:
  - project: 'freedesktop/ci-templates'
    ref: 34039cd573a2df832d465bc9e4c5f543571f5241
    file:
      - '/templates/arch.yml'
      - '/templates/debian.yml'
      - '/templates/fedora.yml'

default:
  tags:
    - CI-gateway

#### BOOTSTRAP CONTAINERS ####

python-container:
  stage: prep
  extends:
    - .fdo.container-build@debian
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  variables:
    # We need a build toolchain because easysnmp in unmaintained, and
    # hence has no binary wheel for us to leverage.
    FDO_DISTRIBUTION_PACKAGES: "python3 python3-pip build-essential libsnmp-dev wget"
    FDO_DISTRIBUTION_VERSION: 'bullseye'
    FDO_REPO_SUFFIX: 'python-container'
    FDO_DISTRIBUTION_TAG: '2022-02-11'
    FDO_DISTRIBUTION_EXEC: 'pip install build tox twine pycodestyle'
  rules:
    - changes:
      - .gitlab-ci.yml

.set-python-image:
  variables:
    TAG: !reference [python-container, variables, FDO_DISTRIBUTION_TAG]
  image: $CI_REGISTRY_IMAGE/python-container:$TAG
  dependencies:
    - python-container

valve-infra-base-container:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: prep
  variables:
    BASE_IMAGE: archlinux:base-devel-20220130.0.46058
    FDO_DISTRIBUTION_TAG: '2022-03-07.1'
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
    IMAGE_NAME_LATEST: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  script: |
    set -eux

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi

    sh .gitlab-ci/valve-infra-base-container-build.sh

  rules:
    - changes:
      - .gitlab-ci.yml

#### TESTS ####

test ansible:
  # Minimal image for running podman and friends
  # Would be nice depend on the image like this,
  #   image: $CI_REGISTRY_IMAGE/valve-infra-base-container:latest
  # but that bind-mounts /etc/resolv.conf, which breaks our networking setup.
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  variables:
    BASE_CONTAINER_TAG: !reference [valve-infra-base-container, variables, FDO_DISTRIBUTION_TAG]
    BASE_IMAGE: $CI_REGISTRY_IMAGE/valve-infra-base-container:$BASE_CONTAINER_TAG
  stage: tests
  script: |
    set -eux

    buildah_run="buildah run --isolation chroot"
    buildah_commit="buildah commit --format docker"

    buildcntr=$(buildah from -v `pwd`:/app/valve-infra --dns=none --isolation=chroot $BASE_IMAGE)
    buildmnt=$(buildah mount $buildcntr)

    buildah config --workingdir /app/valve-infra/ansible $buildcntr

    $buildah_run $buildcntr sh -c 'env LC_ALL=C pacman -Qi' | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h
    $buildah_run $buildcntr du -h -d 3 /usr /etc /app | sort -h
    $buildah_run $buildcntr du -h /usr/lib/python3.10/site-packages | sort -h

    # The Gitlab runner cache deliberately chmod 777's all
    # directories. This upsets ansible and there's nothing we can
    # really do about it in our repo. See
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4187
    $buildah_run $buildcntr chmod -R o-w /app/valve-infra/ansible
    $buildah_run $buildcntr ansible-lint --version
    $buildah_run $buildcntr ansible-lint -f plain
    $buildah_run $buildcntr ansible-playbook --syntax-check gateway.yml
    $buildah_run $buildcntr ansible-playbook ./gateway.yml -l localhost
  rules:
    - changes:
      # We might want to trigger on executor and salad...
      - ansible/**/*
      - executor/**/*
      - salad/**/*

# FIXME: ipxe-boot-server should be moved to a proper Python package,
# so it can follow the pattern of the other Python services regarding
# linting, testing and building.
test ipxe-boot-server:
  extends:
    - .set-python-image
  stage: tests
  rules:
    - changes:
      - ipxe-boot-server/**/*
      - .gitlab-ci.yml
  script:
    - cd ipxe-boot-server/
    # Shouldn't we just use the setup.py to launch this, rather than calling specific tools?
    - pycodestyle --max-line-length=120 .
    - pip3 install -r requirements.txt
    - python3 -m unittest *.py

.python-test:
  extends:
    - .set-python-image
  stage: tests
  rules:
    - changes:
      - .gitlab-ci/python-container*
      - ${PACKAGE_DIR}/**/*
      - .gitlab-ci.yml
  script:
    - tox -c ${PACKAGE_DIR}/setup.cfg
    - python3 -m build ${PACKAGE_DIR}
  artifacts:
    paths:
      - ${PACKAGE_DIR}/dist/

test executor/client:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/client'

test executor/server:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/server'

test gfxinfo:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'gfxinfo'
  before_script:
    - pushd gfxinfo/src/valve_gfx_ci/gfxinfo
    # Impossible to re-use cache_database() as it would force us to install all the deps of gfxinfo just to access these URLs...
    - wget "https://gitlab.freedesktop.org/agd5f/linux/-/raw/amd-staging-drm-next/drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c"
    - wget "https://gitlab.freedesktop.org/mesa/drm/-/raw/master/data/amdgpu.ids"
    - popd

test valvetraces:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'valvetraces'

test salad:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'salad'

#### PUBLIC CONTAINERS: ####

#
# WARNING: Do not change the name of the jobs, as it will also change the name
# of the container...

mesa-trigger-container:
  stage: containers
  extends: .fdo.container-build@debian
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  variables:
    FDO_DISTRIBUTION_PACKAGES: 'bash git python3 python3-pip python3-jinja2 wget findutils'
    FDO_REPO_SUFFIX: 'mesa-trigger'
    FDO_DISTRIBUTION_TAG: '2022-03-03.2'
    FDO_DISTRIBUTION_VERSION: 'testing'
    FDO_DISTRIBUTION_EXEC: .gitlab-ci/${CI_JOB_NAME}.sh
  rules:
    - changes:
      - .gitlab-ci.yml

mesa-downstream-trigger-container:
  stage: containers
  extends: .fdo.container-build@fedora
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  variables:
    FDO_BASE_IMAGE: 'quay.io/buildah/stable'
    FDO_DISTRIBUTION_PACKAGES: 'bash inotify-tools git python3-pip python3-jinja2 skopeo wget findutils'
    FDO_REPO_SUFFIX: 'mesa-downstream-trigger'
    FDO_DISTRIBUTION_TAG: '2022-03-18.1'
    FDO_DISTRIBUTION_VERSION: 'latest'
    FDO_DISTRIBUTION_EXEC: .gitlab-ci/${CI_JOB_NAME}.sh
  rules:
    - changes:
      - .gitlab-ci.yml

valve-infra-container:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: containers
  variables:
    BASE_CONTAINER_TAG: !reference [valve-infra-base-container, variables, FDO_DISTRIBUTION_TAG]
    BASE_IMAGE: $CI_REGISTRY_IMAGE/valve-infra-base-container:$BASE_CONTAINER_TAG
    FDO_DISTRIBUTION_TAG: 2022-03-21.1
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
    IMAGE_NAME_LATEST: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  script: |
    set -x

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi

    sh .gitlab-ci/valve-infra-container-build.sh
  rules:
    - changes:
      - .gitlab-ci.yml

machine_registration:
  # Minimal image for running podman and friends
  image: registry.freedesktop.org/freedesktop/ci-templates/x86_64/container-build-base:2021-06-21.2
  stage: containers
  variables:
    FDO_DISTRIBUTION_TAG: 2022-02-17.2
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$FDO_DISTRIBUTION_TAG
    IMAGE_NAME_LATEST: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  # FIXME: Move to ci-templates when the entrypoint / working-dir changes are merged into upstream
  script: |
    set -x

    ( skopeo inspect docker://$IMAGE_NAME || true ) | jq '[.Digest, .Layers]' > local_sha
    if [ -s local_sha ]; then
       echo "Container already built"
       exit 0
    fi
    sh .gitlab-ci/machine-registration-container-build.sh
  rules:
    - changes:
      - .gitlab-ci.yml

#### DEPLOYMENT JOBS ####

.python-deploy:
  extends:
    - .set-python-image
  stage: deploy
  rules:
    - if: $TWINE_PASSWORD == ""
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
  script:
    - twine upload -u "__token__" ${PACKAGE_DIR}/dist/*
  # This will fail if the package already exists, not pleasant to
  # check ahead of time for that, so allow the job to fail
  allow_failure: true

deploy executor/client:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_CLIENT_TOKEN
    PACKAGE_DIR: 'executor/client'
  dependencies:
    - test executor/client

deploy executor/server:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_SERVER_TOKEN
    PACKAGE_DIR: 'executor/server'
  dependencies:
    - test executor/server

deploy gfxinfo:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_GFXINFO_TOKEN
    PACKAGE_DIR: gfxinfo
  dependencies:
    - test gfxinfo

deploy valvetraces:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_VALVETRACES_TOKEN
    PACKAGE_DIR: valvetraces
  dependencies:
    - test valvetraces

deploy salad:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_SALAD_TOKEN
    PACKAGE_DIR: salad
  dependencies:
    - test salad
