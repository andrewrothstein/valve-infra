# TODO: Move all the container builds to ci-templates, it provides
# some features like including project caching and more aggressive
# image size optimisations than we do here, as well as being something
# of a standard in fd.o. Unfortunately, there's a few shortcomings,
# and the project is rather complex to hack, so very much a WIP!
stages:
  - prep
  - lint
  - containers
  - python
  - tests
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  FDO_UPSTREAM_REPO: mupuf/valve-infra
  PYTHON_VERSION: '3.10'

include:
  - project: 'freedesktop/ci-templates'
    ref: 34039cd573a2df832d465bc9e4c5f543571f5241
    file:
      - '/templates/arch.yml'
      - '/templates/debian.yml'

default:
  tags:
    - CI-gateway


.ansible-container-vars:
  variables:
    FDO_DISTRIBUTION_TAG: 'valve-infra-arch-ansible-2021-12-23'

build-arch-ansible-container:
  stage: prep
  extends:
    - .fdo.container-build@arch
    - .ansible-container-vars
  rules:
    - changes:
      - .gitlab-ci.yml
  variables:
    FDO_DISTRIBUTION_PACKAGES: "ansible ansible-lint yamllint"
    FDO_DISTRIBUTION_TAG: 'valve-infra-arch-ansible-2021-12-23'
  before_script:
    - rm /var/lib/containers/storage/* -rf

ansible:
  stage: lint
  extends:
    - .fdo.distribution-image@arch
    - .ansible-container-vars
  rules:
    - changes:
      - ansible/**/*
      - .gitlab-ci.yml
  script:
    # ansible complains if the dir is world-writeable:
    - chmod -R o-w ansible
    - cd ansible
    # dependency for role(s) that build packages from AUR
    - ansible-galaxy collection install kewlfft.aur
    - ansible-lint --version
    - ansible-lint -f plain
    - ansible-playbook --syntax-check gateway.yml

# Containers
.container base:
  image: quay.io/podman/stable:latest
  stage: containers
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    - rm /var/lib/containers/storage/* -rf
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; fi
  # WARNING: after_script does not currently seem to work, we had to duplicate it into every container.

mesa-trigger-container:
  stage: containers
  extends: .fdo.container-build@debian
  rules:
    - changes:
      - .gitlab-ci/${CI_JOB_NAME}.yml
      - .gitlab-ci/${CI_JOB_NAME}.sh
  variables:
    FDO_DISTRIBUTION_PACKAGES: 'python3 python3-pip wget findutils bash'
    FDO_DISTRIBUTION_TAG: '2022-02-02-mesa-trigger'
    FDO_DISTRIBUTION_VERSION: 'testing'
    FDO_DISTRIBUTION_EXEC: .gitlab-ci/${CI_JOB_NAME}.sh

.valve-infra-rules:
  rules:
    - changes: &valve_infra_core_file_list
      - Makefile
      - .gitlab-ci.yml
      - ansible/**/*

valve-infra:
  extends:
    - .container base
  rules:
    - changes:
        *valve_infra_core_file_list
      when: on_success
    - changes:
      - containers/valve-infra/**
      when: on_success
    - when: never
  script:
    - dnf install -y make && dnf clean all && rm -rf /var/cache/yum
    - make REGISTRY=$CI_REGISTRY CONTAINER=$CI_PROJECT_PATH/$CI_JOB_NAME:latest valve-infra-container
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi

executor:
  extends:
    - .container base
  rules:
    - changes:
      - executor/**/*
      - Makefile
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME -f executor/Dockerfile executor
    - |
       podman run --rm \
           --entrypoint=sh $IMAGE_NAME \
           -c 'pip install tox && tox -c server/setup.cfg'

machine_registration:
  extends:
    - .container base
  rules:
    - changes:
      - machine_registration/**/*
      - gfxinfo/**/*
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME -f machine_registration/Dockerfile .
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi

python-container:
  stage: prep
  extends:
    - .fdo.container-build@debian
  before_script:
    # Getting this on the farm runner gateways,
    #   User-selected graph driver \"vfs\" overwritten by graph driver \"overlay\" from database - delete libpod local files to resolve"
    - rm -rf /var/lib/containers/storage/libpod/*
  variables:
    # We need a build toolchain because easysnmp in unmaintained, and
    # hence has no binary wheel for us to leverage.
    FDO_DISTRIBUTION_PACKAGES: "python3 python3-pip build-essential libsnmp-dev"
    FDO_DISTRIBUTION_VERSION: 'bullseye'
    FDO_REPO_SUFFIX: 'python-container'
    FDO_DISTRIBUTION_TAG: '2022-02-04.4'
    FDO_DISTRIBUTION_EXEC: 'pip install build tox twine pycodestyle'

gitlab-trigger:
  extends:
    - .container base
  rules:
    - changes:
      - containers/gitlab-trigger/**/*
      - executor/client/**/*
      - valvetraces/**/*
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME -f containers/gitlab-trigger/Dockerfile .
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi

salad:
  extends:
    - .container base
  rules:
    - changes:
      - salad/**/*
      - .gitlab-ci.yml
  script:
    - podman build -t $IMAGE_NAME salad/
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then podman push $IMAGE_NAME; fi


# Python packages
.python_package base:
  image: $CI_REGISTRY_IMAGE/python-container:latest
  stage: python
  rules:
    - changes:
      - $CI_JOB_NAME/**/*
      - .gitlab-ci.yml
  script:
    - cd $CI_JOB_NAME
    # Shouldn't we just use the setup.py to launch this, rather than calling specific tools?
    - pycodestyle --max-line-length=120 .
    - pip install -r requirements.txt
    - python -m unittest *.py

ipxe-boot-server:
  extends:
    - .python_package base

.set-python-image:
  variables:
    TAG: !reference [python-container, variables, FDO_DISTRIBUTION_TAG]
  image: $CI_REGISTRY_IMAGE/python-container:$TAG

.python-test:
  extends:
    - .set-python-image
  stage: tests
  rules:
    - changes:
      - .gitlab-ci/python-container*
      - ${PACKAGE_DIR}/**/*
      - .gitlab-ci.yml
  script:
    - tox -c ${PACKAGE_DIR}/setup.cfg
    - python3 -m build ${PACKAGE_DIR}
  artifacts:
    paths:
      - ${CI_JOB_NAME}/dist/

.python-deploy:
  extends:
    - .set-python-image
  stage: deploy
  rules:
    - if: $TWINE_PASSWORD == ""
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
  script:
    - twine upload -u "__token__" ${PACKAGE_DIR}/dist/*
  # This will fail if the package already exists, not pleasant to
  # check ahead of time for that, so allow the job to fail
  allow_failure: true

test executor/client:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/client'

test executor/server:
  extends:
    - .python-test
  variables:
    PACKAGE_DIR: 'executor/server'

deploy executor/client:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_CLIENT_TOKEN
    PACKAGE_DIR: 'executor/client'
  dependencies:
    - test executor/client

deploy executor/server:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_EXECUTOR_SERVER_TOKEN
    PACKAGE_DIR: 'executor/server'
  dependencies:
    - test executor/server

deploy gfxinfo:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_GFXINFO_TOKEN
    PACKAGE_DIR: gfxinfo
  before_script:
    - pushd gfxinfo/src/valve_gfx_ci/gfxinfo
    # Impossible to re-use cache_database() as it would force us to install all the deps of gfxinfo just to access these URLs...
    - wget "https://gitlab.freedesktop.org/agd5f/linux/-/raw/amd-staging-drm-next/drivers/gpu/drm/amd/amdgpu/amdgpu_drv.c"
    - wget "https://gitlab.freedesktop.org/mesa/drm/-/raw/master/data/amdgpu.ids"
    - popd

deploy valvetraces:
  extends:
    - .python-deploy
  variables:
    TWINE_PASSWORD: $PYPI_VALVETRACES_TOKEN
    PACKAGE_DIR: valvetraces
