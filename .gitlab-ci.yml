stages:
- pip
- containers
- tests

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.pip_package base:
  image: python:3.9
  stage: pip
  rules:
    - changes:
      - $CI_JOB_NAME/setup.cfg
      - .gitlab-ci.yml
  script:
    - pip install build twine
    - python3 -m build $CI_JOB_NAME
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]] && [[ -n "$TWINE_PASSWORD" ]]; then twine upload -u "__token__" $CI_JOB_NAME/dist/; fi

gfxinfo:
  extends:
    - .pip_package base
  variables:
    TWINE_PASSWORD: $PIP_GFXINFO_TOKEN


.container base:
  image: docker/compose:alpine-1.27.4
  stage: containers
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:latest
  before_script:
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; fi
  after_script:
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then docker push $IMAGE_NAME; fi

executor:
  extends:
    - .container base
  rules:
    - changes:
      - containers/executor/**
      - .gitlab-ci.yml
  script:
    - docker build -t $IMAGE_NAME -f executor/Dockerfile .

gitlab-sync:
  extends:
    - .container base
  rules:
    - changes:
      - containers/gitlab-sync/**
      - .gitlab-ci.yml
  script:
    - docker build -t $IMAGE_NAME ./containers/gitlab-sync
    - |
       docker run --rm \
           -v $(pwd)/htmlcov:/app/htmlcov \
           --entrypoint=sh $IMAGE_NAME \
           -c 'pip install tox && tox'

machine_registration:
  extends:
    - .container base
  rules:
    - changes:
      - machine_registration/**
      - .gitlab-ci.yml
  script:
    - docker build -t $IMAGE_NAME machine_registration

farm-runner:
  extends:
    - .container base
  rules:
    - changes:
      - containers/farm-runner/**
      - .gitlab-ci.yml
  script:
    - docker build -t $IMAGE_NAME containers/farm-runner

valve-infra:
  extends:
    - .container base
  rules:
    - changes:
      - Dockerfile
      - .gitlab-ci.yml
  script:
    - docker build -t $IMAGE_NAME .

