#!/bin/bash

# Set errexit to force an exit on error conditions, and pipefail to
# force any failures in a pipeline to create an error condition
set -o errexit
set -o pipefail
#set -o xtrace

# Generate a configuration file based on the default values, or the
# overriding env vars
[ -d ./config/ ] || mkdir ./config/
echo -e "DNS_SERVER=${DNS_SERVER:-10.0.0.6}
TMP_MOUNT=${TMP_MOUNT:-/mnt/tmp}
PERMANENT_MOUNT=${PERMANENT_MOUNT:-/mnt/permanent}
PRIVATE_INTERFACE=${PRIVATE_INTERFACE:-private}
" > ./config/prod.env
cat ./config/private.env >> ./config/prod.env

. ./config/prod.env

[ -d "$TMP_MOUNT" ] || mkdir "$TMP_MOUNT"
[ -d "$PERMANENT_MOUNT" ] || mkdir "$PERMANENT_MOUNT"

D=$(dirname $(readlink -f $0))
MARS_SECRET_KEYFILE=$PERMANENT_MOUNT/mars_secret_key
if [ ! -e $MARS_SECRET_KEYFILE ]; then
    python3 -c "import secrets ; print(secrets.token_urlsafe())" > $MARS_SECRET_KEYFILE
fi
export MARS_SECRET_KEY=$(<$MARS_SECRET_KEYFILE)

log(){
    echo "valve-infra: $*"
}
die(){
    log "FATAL error: $*"
    exit 1
}

[ -d $TMP_MOUNT ] || die "TMP_MOUNT path ($TMP_MOUNT) is not a directory"
[ -e /sys/class/net/$PRIVATE_INTERFACE ] || die "PRIVATE_INTERFACE ($PRIVATE_INTERFACE) does not exist"

# Setup first-time gitlab configuration
if [ -n "$GITLAB_REGISTRATION_TOKEN" ] && [ -n "$GITLAB_ACCESS_TOKEN" ]; then
    [ -d $TMP_MOUNT/gitlab-runner ] || mkdir $TMP_MOUNT/gitlab-runner
    ./gitlab-runner-sync --registration-token $GITLAB_REGISTRATION_TOKEN \
                         --access-token $GITLAB_ACCESS_TOKEN \
                         --machine-data machines.db \
                         --gitlab-config $TMP_MOUNT/gitlab-runner/config.toml
fi

docker-compose --env-file ./config/prod.env pull
docker-compose --env-file ./config/prod.env up
