#!/usr/bin/env bash
# shellcheck disable=SC2046,SC2086
# -*- mode: shell-script -*-
# The quoting check doesn't serve me.

set -ex

ARTIFACTS_URL="$1"

# FIXME: Seems pointless creating this directory, it's only important
# on the board, not the runner.
mkdir -pv "$CI_PROJECT_DIR"
cd "$CI_PROJECT_DIR"

# Grab this pipeline's built mesa
wget -S --progress=dot:giga -O mesa.tar.gz "$MESA_URL"
# Populate install/
tar -xzf mesa.tar.gz
# Generate the whitelisted environment for the board.
BM=$CI_PROJECT_DIR/install/bare-metal
"$BM"/forward-job-env-vars.sh | LC_ALL=C sort > env.sh

echo "======== JOB ENVIRONMENT ================="
env
echo "======== BOARD ENVIRONMENT ==============="
cat env.sh

if [ -z "$ARTIFACTS_URL" ] || [ -z "$KERNEL_IMAGE_NAME" ] || [ -z "$DISTRIBUTION_TAG" ]; then
    echo "Invalid environment"
    exit 1
fi

if [ -z "$CI_PROJECT_DIR" ] || [ -z "$BARE_METAL_TEST_SCRIPT" ]; then
    echo "The job environment is unexpected. Aborting."
    exit 1
fi

if [ -z "$CI_RUNNER_DESCRIPTION" ]; then
    echo "Unknown board name, not runner description given"
    exit 1
fi

# Fetch this filesystem and update the board configuration if it changes.
boots-client --endpoint http://localhost:8087 \
             --filesystem="${ARTIFACTS_URL}/hp-t530-rootfs.tgz,${CI_RUNNER_DESCRIPTION}" \
             --overwrite \
             --cache-key="${DISTRIBUTION_TAG}"

# Now update the configuration, the only thing we have here is the
# CI_RUNNER_DESCRIPTION (i.e., igalia-amd-gfx8-1), we need to
# query something (perhaps from boots) to find its MAC addr.
# mars-client --fetch-data $CI_RUNNER_DESCRIPTION
# boots-client --update-conifg MAC_ADDR DISTRIBUTION_TAG

# This is set in the runner's config.toml based on which runner has
# picked up a job.
JOBHOST=$CI_RUNNER_DESCRIPTION

# Restart this runner (should not be running)
pdu $JOBHOST reboot

# we could receive netconsole logging to determine when to continue
# moving forward, for now just sleep for a bit
echo "waiting 60s for ${JOBHOST} to come up"
find /root -exec ls -l '{}' \;
ls -ld /root/.ssh/

sleep 60

# Clean out the previous runs output
# shellcheck disable=SC2087
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$JOBHOST" \
    bash -s <<EOF 
    set -x
    if [ -n "$CI_PROJECT_DIR" ]; then
        rm -rf ${CI_PROJECT_DIR}/*
        mkdir -pv ${CI_PROJECT_DIR}
    else
        echo "Bad environment, CI_PROJECT_DIR not set"
        exit 1
    fi
EOF
[ $? ] || exit 1

scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no mesa.tar.gz $JOBHOST:${CI_PROJECT_DIR}/mesa.tar.gz || exit 1
scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no env.sh $JOBHOST:${CI_PROJECT_DIR}/ci-env.sh || exit 1

# These thin clients don't have serial, so early messages are
# lost. Some can be recovered using the netconsole module, but not all
# of them (and not the interesting DRM ones, since the NIC gets
# brought up after those).

# Run the test and collect all job output to serial.txt
# That filename convention is used by the existing baremetal boards, I'm using ssh however, not serial.
# I really do want shell expansions to happen locally, not on the remote.
# shellcheck disable=SC2087
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$JOBHOST" \
  bash -s <<EOF | tee serial.txt
   # It is very important that this script sees the environment "as new" each time it runs
   # The init script for the boards ensure the "work" directory is blown away anew each time.
   # CI_PROJECT_DIR comes from the parent scope of this script, be careful.
   set -x
   cd $CI_PROJECT_DIR
   tar -xzf mesa.tar.gz

   # Also copied from the above, it's the whitelisted environment variables from the CI job.
   source ci-env.sh

   # There is an X server on tty1
   # export DISPLAY=:1
   # Do not sync the shader cache over NFS
   export XDG_CACHE_HOME=/tmp
   export XDG_RUNTIME_DIR=/tmp
   export PYTHONPATH=$(python3 -c "import sys;print(\":\".join(sys.path))")
   # The CI libdrm needs to override any drm that is installed by the X11 server deps.
   export LD_LIBRARY_PATH=/libdrm/lib/x86_64-linux-gnu:${CI_PROJECT_DIR}/install/lib
   export LIBGL_DRIVERS_PATH=${CI_PROJECT_DIR}/install/lib/dri

   if sh ${CI_PROJECT_DIR}/$BARE_METAL_TEST_SCRIPT; then
      echo 0 > ${CI_PROJECT_DIR}/results/job_return_code
   else
      echo 1 > ${CI_PROJECT_DIR}/results/job_return_code
   fi
EOF

# Copy the results back from the board.
scp -r -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$JOBHOST":"$CI_PROJECT_DIR"/results .

exit $(< results/job_return_code)
