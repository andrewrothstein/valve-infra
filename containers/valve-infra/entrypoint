#!/bin/bash

# Set errexit to force an exit on error conditions, and pipefail to
# force any failures in a pipeline to create an error condition
set -o errexit
set -o pipefail
#set -o xtrace

# Source the user configuration from the permanent volume
source /mnt/permanent/config.env || /bin/true

# Generate a configuration file based on the default values, or the
# overriding env vars
[ -d ./config/ ] || mkdir ./config/
echo -e "TMP_MOUNT=${TMP_MOUNT:-/mnt/tmp}
PERMANENT_MOUNT=${PERMANENT_MOUNT:-/mnt/permanent}
REGISTRY_MOUNT=${REGISTRY_MOUNT:-/mnt/tmp/registry}
PRIVATE_INTERFACE=${PRIVATE_INTERFACE:-private}
MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-`tr -dc [:alnum:] < /dev/urandom | head -c 32`}
VALVETRACES_MINIO_PASSWORD=${VALVETRACES_MINIO_PASSWORD:-`tr -dc [:alnum:] < /dev/urandom | head -c 32`}
MINIO_URL=${MINIO_URL:-http://10.42.0.1:9000}
FDO_PROXY_REGISTRY=${FDO_PROXY_REGISTRY:-http://10.42.0.1:8002}
LOCAL_REGISTRY=${LOCAL_REGISTRY:-http://10.42.0.1:8004}
FARM_NAME=${FARM_NAME}
GITLAB_REGISTRATION_TOKEN=${GITLAB_REGISTRATION_TOKEN}
GITLAB_ACCESS_TOKEN=${GITLAB_ACCESS_TOKEN}
" > ./config/prod.env

. ./config/prod.env

[ -d "$TMP_MOUNT" ] || mkdir "$TMP_MOUNT"
[ -d "$PERMANENT_MOUNT" ] || mkdir "$PERMANENT_MOUNT"
[ -d "$REGISTRY_MOUNT" ] || mkdir "$REGISTRY_MOUNT"

[ -e /sys/class/net/$PRIVATE_INTERFACE ] || ( echo "PRIVATE_INTERFACE ($PRIVATE_INTERFACE) does not exist" && exit 1 )

D=$(dirname $(readlink -f $0))
PRIVATE_IP=$(ip -f inet addr show $PRIVATE_INTERFACE | awk '/inet / {print $2}')
# Strip off the subnet
PRIVATE_HOST=${PRIVATE_IP%%/*}
# Todo, abstract 10.42.0.1
# Not trivial, because of externals like gitlab-trigger (how to
# pass the config to that container?)
if [ "$PRIVATE_HOST" != "10.42.0.1" ]; then
    echo "WARNING: The private interface ($PRIVATE_INTERFACE) has an unexpected IP address"
    echo "Assigned address: ${PRIVATE_HOST}"
    echo "Expected 10.42.0.1"
    echo "Adding 10.42.0.1"
    ip addr add 10.42.0.1/24 dev ${PRIVATE_INTERFACE}
fi
ip link set private up

MARS_SECRET_KEYFILE=$PERMANENT_MOUNT/mars_secret_key
if [ ! -e $MARS_SECRET_KEYFILE ]; then
    python3 -c "import secrets ; print(secrets.token_urlsafe())" > $MARS_SECRET_KEYFILE
fi
export MARS_SECRET_KEY=$(<$MARS_SECRET_KEYFILE)

# Do not expose kernel messages
sysctl -w kernel.dmesg_restrict=1

log(){
    echo "valve-infra: $*"
}
die(){
    log "FATAL error: $*"
    exit 1
}

if [ ! -n "$VALVE_INFRA_NO_PULL" ]; then
    docker-compose --env-file ./config/prod.env pull
fi
docker-compose --env-file ./config/prod.env up --remove-orphans -d

stop_infra(){
    log "Tearing down the infra"

    docker-compose --env-file ./config/prod.env down

    # HACK: docker-compose logs does not quit on SIGTERM...
    killall docker-compose -s9 || /bin/true
}
trap stop_infra SIGTERM SIGINT ERR

docker-compose --env-file ./config/prod.env logs --tail=0 -f || /bin/true

stop_infra
