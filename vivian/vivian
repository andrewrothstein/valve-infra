#!/bin/bash

# Copyright Â© 2021-2022 Valve Corporation
# Script to start a virtual testing harness for Valve's graphics
# infrastructure.

set -eu

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

usage() {
    echo "Usage: $0 TODO TODO TODO"
}

__host_bridge_name='vivianbr0'

__executor_port=8000
__influxd_port=8086
__salad_port=8100
__minio_port=9000
__ssh_port=60022
__ssh_id=
__vpdu_port=9191

__disk_img=

__local_share=

__gateway_monitor_socket='gateway_monitor.sock'
__gateway_qemu_log_file='gateway_qemu.log'
__gateway_public_mac_addr='DE:AD:BE:EF:00:11'
__gateway_private_mac_addr='DE:AD:BE:EF:00:12'

__initial_fleet_size=2

__boot_mode=""

__kernel_img=''
__kernel_append=''
__ramdisk=''


if [ -z ${1+x} ]; then
    usage
    exit 1
fi

# Use doas if available
type -P doas &>/dev/null && _sudo=doas || _sudo=sudo

while test -n "$1"; do
    case "$1" in
        --help*|-h*)
            usage
            exit 1
            ;;
        --host-bridge-name=*)
            __host_bridge_name="${1#--host-bridge-name=}"
            ;;
        --gateway-monitor-socket=*)
            __gateway_monitor_socket="${1#--gateway-monitor-socket=}"
            ;;
        --kernel-img=*)
            __kernel_img="${1#--kernel-img=}"
                ;;
        --kernel-append=*)
            __kernel_append="${1#--kernel-append=}"
                ;;
        --ramdisk=*)
            __ramdisk="${1#--ramdisk=}"
                ;;
        --gateway-disk-img=*)
            __disk_img="${1#--gateway-disk-img=}"
                ;;
        --gateway-public-mac-addr=*)
            __gateway_public_mac_addr="${1#--gateway-public-mac-addr=}"
            ;;
        --gateway-private-mac-addr=*)
            __gateway_private_mac_addr="${1#--gateway-private-mac-addr=}"
            ;;
        --executor-port=*)
            __executor_port="${1#--executor-port=}"
            ;;
        --influxd-port=*)
            __influxd_port="${1#--influxd-port=}"
            ;;
        --local-share=*)
            __local_share="${1#--local-share=}"
            ;;
        --salad-port=*)
            __salad_port="${1#--salad-port=}"
            ;;
        --minio-port=*)
            __minio_port="${1#--minio-port=}"
            ;;
        --ssh-port=*)
            __ssh_port="${1#--ssh-port=}"
            ;;
        --ssh-id=*)
            __ssh_id="${1#--ssh-id=}"
            ;;
        --initial-fleet-size=*)
            __initial_fleet_size="${1#--initial-fleet-size=}"
            ;;
        --vpdu-port=*)
            __vpdu_port="${1#--vpdu-port=}"
            ;;
        --boot-mode=*)
                mode="${1#--boot-mode=}"
            if [ "$mode" = "uefi" ]; then
            __ovmf_dirs=("/usr/share/edk2-ovmf/x64" "/usr/share/OVMF")
            __ovmf=
            for d in ${__ovmf_dirs[@]}; do
                [ -e "$d/OVMF.fd" ] && __ovmf="$d/OVMF.fd"
            done

            if [ -z "$__ovmf" ] ; then
                echo "ERROR: OVMF not found. Probably missing the edk2 ovmf packages."
                exit 1
            fi
            __boot_mode="-drive if=pflash,format=raw,unit=0,file=$__ovmf,readonly=on -global driver=cfi.pflash01,property=secure,value=off"
            else
            __boot_mode=""
            fi
            ;;
        start|"test-installer"|"integration-tests")
            cmd="$1"
            break
            ;;
        *)
            echo "Error, unexpected argument $1"
            exit 1
            ;;
    esac
    shift
done

__gateway_nic_opts="-nic user,ipv6=off,mac=$__gateway_public_mac_addr,hostfwd=tcp::$__ssh_port-:22,hostfwd=tcp::$__executor_port-:80,hostfwd=tcp::$__influxd_port-:8086,hostfwd=tcp::$__salad_port-:$__salad_port,hostfwd=tcp::$__minio_port-:9000,model=virtio-net-pci -nic bridge,br=$__host_bridge_name,mac=$__gateway_private_mac_addr,model=virtio-net-pci"
__ssh_options="-p $__ssh_port -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet"
__scp_options="-P $__ssh_port -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet"
if [ ! -z "$__ssh_id" ]; then
    __ssh_options="$__ssh_options -i $__ssh_id -o IdentitiesOnly=yes"
    __scp_options="$__scp_options -i $__ssh_id -o IdentitiesOnly=yes"
fi

start_gateway() {
    [ -f $__disk_img ] || ( echo "$__disk_image is not a file" && exit 1 )

    if [ -n "$__kernel_img" ] || [ -n "$__ramdisk" ] || [ "$__kernel_append" ]; then
	__qemu_kernel_opts="-kernel $__kernel_img -initrd $__ramdisk"
    else
	__qemu_kernel_opts=""
    fi

    if [ -n "$__local_share" ]; then
	# TODO: No 9pfs built into boot2container
	# __qemu_mount_opts="-virtfs local,path=$__local_share,mount_tag=local-share,security_model=mapped-xattr,id=local-share,readonly"
	__qemu_mount_opts=""
    else
	__qemu_mount_opts=""
    fi

    set +e
    grep -q "allow $__host_bridge_name" /etc/qemu/bridge.conf 2> /dev/null
    __result=$?
    set -e
    if [ $__result -ne 0 ]; then
        if [ -f /etc/qemu/bridge.conf ] && [ $__result -ne 1 ]; then
            echo 'WARNING: You probably need to make "/etc/qemu/bridge.conf" readable!'
        else
            $_sudo mkdir -p /etc/qemu || true
            $_sudo sh -c "echo \"allow $__host_bridge_name\" >> /etc/qemu/bridge.conf"
        fi
    fi

    # WARNING: you should make sure that the
    # /usr/lib/qemu/qemu-bridge-helper (or similar path) has setuid.
    #
    # If not, you may see the following error:
    # "failed to create tun device: Operation not permitted"
    #
    # You can set the setuid with something like:
    #
    # chmod u+s /usr/lib/qemu/qemu-bridge-helper

    qemu-system-x86_64 \
        -daemonize \
        -hda "$__disk_img" \
            -monitor unix:"$__gateway_monitor_socket",server,nowait \
        $__gateway_nic_opts \
        $__boot_mode \
        $__qemu_kernel_opts \
	$__qemu_mount_opts \
        -append "$__kernel_append" \
        -m 4G \
        -enable-kvm -smp 4

    echo "Started gateway VM"
}

wait_for_ssh() {
    echo "Waiting for SSH to respond..."
    { local prev_shell_config=$-; set +x; } 2>/dev/null
    __ssh_options="$__ssh_options -o BatchMode=yes -o ConnectionAttempts=1"
    while ! ssh $__ssh_options root@localhost true; do
    sleep 0.2
    done >/dev/null 2>&1
    echo "SSH is up..."
    set "-$prev_shell_config"
}

wait_for_endpoint() {
    local port=$1
    local endpoint=$2

    echo "Waiting for http://localhost:$port/$endpoint to respond..."
    { local prev_shell_config=$-; set +x; } 2>/dev/null
    while ! curl -sL "http://localhost:$port/$endpoint" -o/dev/null; do
    sleep 0.1
    done
    set "-$prev_shell_config"
}

provision_infra() {
    wait_for_ssh

    # Container runtime weirdness? The tmp volume mount sometimes gets
    # the permission of 0700, which means reads from the nobody user
    # (dnsmasq) to the TFTP dir fail. Very strange!
    ssh $__ssh_options root@localhost chmod -v 755 /mnt/tmp

    # Set the farm name
    echo FARM_NAME=${FARM_NAME} | ssh $__ssh_options root@localhost tee /mnt/permanent/config.env

    ## Executor configuration
    wait_for_endpoint "$__executor_port" "api/v1/machine"

    # Initial provisioning of the MaRS DB
    if ! ssh $__ssh_options root@localhost "test -s /mnt/permanent/mars_db.yaml"; then
        EXPOSE_RUNNERS=false
        [ -n "${GITLAB_URL}" ] && [ -n "${GITLAB_REGISTRATION_TOKEN}" ] && EXPOSE_RUNNERS=true
        cat << EOF > vivian/__mars_db.yaml
pdus:
  VPDU:
    driver: vpdu
    config:
      hostname: 10.0.2.2:$__vpdu_port

gitlab:
  freedesktop:
    url: ${GITLAB_URL}
    registration_token: ${GITLAB_REGISTRATION_TOKEN}
    expose_runners: ${EXPOSE_RUNNERS}
    maximum_timeout: 21600
    gateway_runner:
      token: <invalid>
      exposed: true
EOF
        scp $__scp_options vivian/__mars_db.yaml root@localhost:/mnt/permanent/mars_db.yaml
        rm vivian/__mars_db.yaml
    fi
}

create_host_bridge() {
    if ! ip link show "$__host_bridge_name" 2>&1>/dev/null ; then
    $_sudo ip link add name "$__host_bridge_name" type bridge
    $_sudo ip link set "$__host_bridge_name" up
    $_sudo iptables -I FORWARD -m physdev --physdev-is-bridged -j ACCEPT
    else
    echo "Host bridge $__host_bridge_name already exists"
    fi
}

remove_host_bridge() {
    if ip link show "$__host_bridge_name" 2>&1>/dev/null ; then
    $_sudo ip link set "$__host_bridge_name" down
    $_sudo ip link del name "$__host_bridge_name" type bridge
    # TODO: Should we get rid of this? Maybe it already existed on the system, eh...
    # iptables -I FORWARD -m physdev --physdev-is-bridged -j ACCEPT
    fi
}

cleanup() {
    echo "Performing cleanup"
    # Gracefully powerdown the gateway, I've noticed the disk can
    # become corrupted without being gentle.
    if [ -S "$__gateway_monitor_socket" ]; then
        echo "system_powerdown" | socat - unix-connect:"$__gateway_monitor_socket"
    fi
    echo "WARNING! No way to shut down the VM gracefully, be careful with disk corruption!"
    sleep 2
    rm "$__gateway_monitor_socket"
    remove_host_bridge
}

test_installer() {
    while test -n "$1"; do
        case "$1" in
            --iso=*)
                __iso="${1#--iso=}"
                ;;
            --gateway-disk-img=*)
                __gateway_disk_img="${1#--gateway-disk-img=}"
                ;;
            *)
                __passthru="$__passthru $1"
                ;;
        esac
        shift
    done

    [ -z "$__iso" ] && echo "ERROR: --iso required" && exit 1
    [ -z "$__gateway_disk_img" ] && echo "ERROR: --gateway-disk-img required" && exit 1

    if [ ! -e "$__gateway_disk_img" ]; then
        qemu-img create -f qcow2 -o size=100G "$__gateway_disk_img"
    fi

    # TODO: Allow specifying differing block device topologies
    qemu-system-x86_64 \
        -drive file="$__gateway_disk_img",if=none,id=nvm \
        -device nvme,serial=deadbeef,drive=nvm \
        -cdrom "$__iso" \
        -boot d \
        $__gateway_nic_opts \
        $__boot_mode \
        -m 4G \
        -display gtk \
        -enable-kvm \
        -serial stdio
}

case "$cmd" in
    start)
        if test -z "$__disk_img"; then
            echo "ERROR: Give a path to the disk image to use for the gateway VM"
            exit 1
        fi
        trap cleanup EXIT
        create_host_bridge
        start_gateway
        provision_infra || true

        ssh $__ssh_options -t root@localhost env LC_ALL=en_US.utf8 tmuxp load .tmuxp/dashboard.yml
        ;;
    test-installer)
        create_host_bridge
        trap cleanup EXIT
        test_installer "$@"
        ;;
        integration-tests)
        echo "WIP: No tests yet!"
        exit 1
        ;;
esac
